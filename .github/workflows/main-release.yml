name: Versionar e gerar release

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.MINHA_CHAVE }}
        
    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Instalar dependências
      run: npm install
      
    - name: Build
      run: npm run build

    - name: Instalar Standard Version
      run: npm install -g standard-version
      
    - name: Configuração git
      run: |
        git config --local user.email "bbrunosiqueira14@gmail.com"
        git config --local user.name "BrunKsp"
        
    - name: Versionar
      id: versionize
      run: standard-version
      continue-on-error: false
    
    - name: Caso não precise de release
      if: steps.versionize.outcome != 'success'
      run: echo "Skipping Release. No release required."

    - name: Subir alterações no git
      if: steps.versionize.outcome == 'success'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.MINHA_CHAVE }}
        branch: ${{ github.ref }}
        tags: true

    - name: "Criar release"
      if: steps.versionize.outcome == 'success'
      uses: "actions/github-script@v5"
      with:
        github-token: "${{ secrets.MINHA_CHAVE }}"
        script: |
          try {
            const tags_url = context.payload.repository.tags_url + "?per_page=1"
            const result = await github.request(tags_url)
            const current_tag = result.data[0].name
            await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: current_tag,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: current_tag,
            });
          } catch (error) {
            core.setFailed(error.message);
          }
